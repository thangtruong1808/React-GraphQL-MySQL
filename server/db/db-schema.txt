-- USERS TABLE: stores user information
CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    uuid CHAR(36) NOT NULL UNIQUE,                 -- UUID for global GraphQL ID
    first_name VARCHAR(100) NOT NULL,                         
    last_name VARCHAR(100) NOT NULL,                          
    email VARCHAR(254) NOT NULL UNIQUE COLLATE utf8mb4_general_ci, 
    password VARCHAR(255) NOT NULL,                           
    role ENUM('ADMIN',         
    'Project Manager', 
    'Software Architect', 
    'Frontend Developer', 
    'Backend Developer', 
    'Full-Stack Developer', 
    'DevOps Engineer', 
    'QA Engineer', 
    'QC Engineer', 
    'UX/UI Designer', 
    'Business Analyst', 
    'Database Administrator', 
    'Technical Writer', 
    'Support Engineer') DEFAULT 'Frontend Developer', 
    is_deleted BOOLEAN DEFAULT FALSE,                         
    version INT DEFAULT 1,                    -- version for optimistic concurrency
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
CREATE INDEX idx_users_is_deleted ON users(is_deleted);

-- REFRESH TOKENS TABLE
CREATE TABLE refresh_tokens (
    id VARCHAR(255) PRIMARY KEY,
    user_id INT NOT NULL,
    token_hash VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    is_revoked BOOLEAN DEFAULT FALSE,
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),
    CONSTRAINT fk_refresh_tokens_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
-- Indexes for performance
CREATE INDEX idx_refresh_tokens_user_id ON refresh_tokens(user_id);
CREATE INDEX idx_refresh_tokens_is_revoked ON refresh_tokens(is_revoked);
CREATE INDEX idx_refresh_tokens_expires_at ON refresh_tokens(expires_at);

-- PROJECTS TABLE: projects owned by users
CREATE TABLE projects (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    uuid CHAR(36) NOT NULL UNIQUE,                            
    name VARCHAR(150) NOT NULL,                               
    description TEXT NOT NULL,                                
    status ENUM('PLANNING', 'IN_PROGRESS', 'COMPLETED') DEFAULT 'PLANNING', 
    owner_id INT NULL,                                        
    is_deleted BOOLEAN DEFAULT FALSE,                         
    version INT DEFAULT 1,                                    
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    CONSTRAINT fk_projects_owner FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE SET NULL,
    FULLTEXT idx_projects_name_description (name, description)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_projects_owner_id ON projects(owner_id);
CREATE INDEX idx_projects_is_deleted ON projects(is_deleted);

-- PROJECT MEMBERS TABLE: many-to-many users to projects with roles
CREATE TABLE project_members (
    project_id INT NOT NULL,                                  
    user_id INT NOT NULL,                                     
    is_deleted BOOLEAN DEFAULT FALSE,                         
    role ENUM('VIEWER', 'EDITOR', 'OWNER') DEFAULT 'VIEWER', 
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    PRIMARY KEY (project_id, user_id),
    CONSTRAINT fk_project_members_project FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
    CONSTRAINT fk_project_members_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_project_members_user_id ON project_members(user_id);
CREATE INDEX idx_project_members_is_deleted ON project_members(is_deleted);

-- PERMISSIONS TABLE: fine-grained access control on projects/tasks/comments
CREATE TABLE permissions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    resource_type ENUM('PROJECT', 'TASK', 'COMMENT') NOT NULL,
    resource_id INT NOT NULL,
    permission ENUM('READ', 'WRITE', 'DELETE', 'ADMIN') NOT NULL,
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
    CONSTRAINT fk_permissions_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_permissions_user_resource (user_id, resource_type, resource_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- TASKS TABLE: tasks belonging to projects and assigned to users
CREATE TABLE tasks (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    uuid CHAR(36) NOT NULL UNIQUE,                            
    title VARCHAR(150) NOT NULL,                              
    description TEXT NOT NULL,                                
    status ENUM('TODO', 'IN_PROGRESS', 'DONE') DEFAULT 'TODO', 
    priority ENUM('LOW', 'MEDIUM', 'HIGH') DEFAULT 'MEDIUM', 
    due_date DATE,                                            
    project_id INT NOT NULL,                                  
    assigned_to INT NULL,                                     
    is_deleted BOOLEAN DEFAULT FALSE,                         
    version INT DEFAULT 1,                                    
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    CONSTRAINT fk_tasks_project FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
    CONSTRAINT fk_tasks_assigned_to FOREIGN KEY (assigned_to) REFERENCES users(id) ON DELETE SET NULL,
    FULLTEXT idx_tasks_title_description (title, description)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_tasks_project_id ON tasks(project_id);
CREATE INDEX idx_tasks_assigned_to ON tasks(assigned_to);
CREATE INDEX idx_tasks_is_deleted ON tasks(is_deleted);

-- TAGS TABLE: tags for tasks filtering and categorization
CREATE TABLE tags (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    name VARCHAR(50) NOT NULL UNIQUE,                         
    description TEXT NOT NULL,                                
    title VARCHAR(255),                                       
    type VARCHAR(255),                                        
    category VARCHAR(255),                                    
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),
    FULLTEXT idx_tags_name_description (name, description)    
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- TASK_TAGS TABLE: many-to-many linking tasks to tags
CREATE TABLE task_tags (
    task_id INT NOT NULL,                                     
    tag_id INT NOT NULL,                                      
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    PRIMARY KEY (task_id, tag_id),
    FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- COMMENTS TABLE: comments on tasks by users, supports realtime features
CREATE TABLE comments (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    uuid CHAR(36) NOT NULL UNIQUE,                            
    task_id INT NOT NULL,                                     
    user_id INT NOT NULL,                                     
    content TEXT NOT NULL,                                    
    is_deleted BOOLEAN DEFAULT FALSE,                         
    version INT DEFAULT 1,                                    
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    CONSTRAINT fk_comments_task FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
    CONSTRAINT fk_comments_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FULLTEXT idx_comments_content (content)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_comments_task_created_at ON comments(task_id, created_at);
CREATE INDEX idx_comments_task_id ON comments(task_id);
CREATE INDEX idx_comments_user_id ON comments(user_id);
CREATE INDEX idx_comments_is_deleted ON comments(is_deleted);

-- TASK_LIKES TABLE: user likes on tasks, enforces relational integrity
CREATE TABLE task_likes (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    user_id INT NOT NULL,                                     
    task_id INT NOT NULL,                                     
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    CONSTRAINT fk_task_likes_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_task_likes_task FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
    UNIQUE (user_id, task_id)                                 
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_task_likes_user_id ON task_likes(user_id);

-- COMMENT_LIKES TABLE: user likes on comments
CREATE TABLE comment_likes (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    user_id INT NOT NULL,                                     
    comment_id INT NOT NULL,                                  
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    CONSTRAINT fk_comment_likes_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_comment_likes_comment FOREIGN KEY (comment_id) REFERENCES comments(id) ON DELETE CASCADE,
    UNIQUE (user_id, comment_id)                              
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_comment_likes_user_id ON comment_likes(user_id);

-- PROJECT_LIKES TABLE: user likes on projects
CREATE TABLE project_likes (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    user_id INT NOT NULL,                                     
    project_id INT NOT NULL,                                  
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    CONSTRAINT fk_project_likes_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_project_likes_project FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
    UNIQUE (user_id, project_id)                              
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_project_likes_user_id ON project_likes(user_id);

-- COMMENT_MENTIONS TABLE: user mentions in comments, optional parent comment threading
CREATE TABLE comment_mentions (
    comment_id INT NOT NULL,                                  
    parent_comment_id INT NULL,                               
    mentioned_user_id INT NOT NULL,                           
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    PRIMARY KEY (comment_id, mentioned_user_id),
    CONSTRAINT fk_comment_mentions_parent FOREIGN KEY (parent_comment_id) REFERENCES comments(id),
    CONSTRAINT fk_comment_mentions_comment FOREIGN KEY (comment_id) REFERENCES comments(id) ON DELETE CASCADE,
    CONSTRAINT fk_comment_mentions_user FOREIGN KEY (mentioned_user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ACTIVITY_LOGS TABLE: logs for user actions, optional metadata
CREATE TABLE activity_logs (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    user_id INT NOT NULL,                                     
    target_user_id INT,                                       
    project_id INT,                                           
    task_id INT,                                             
    action VARCHAR(255) NULL,                                
    type ENUM('TASK_CREATED','TASK_UPDATED','TASK_ASSIGNED','COMMENT_ADDED','PROJECT_CREATED','PROJECT_COMPLETED','USER_MENTIONED'), 
    metadata JSON DEFAULT NULL,                              
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),    
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    CONSTRAINT fk_activity_logs_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_activity_logs_target_user FOREIGN KEY (target_user_id) REFERENCES users(id) ON DELETE SET NULL,
    CONSTRAINT fk_activity_logs_project FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
    CONSTRAINT fk_activity_logs_task FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_activity_logs_type ON activity_logs(type);
CREATE INDEX idx_activity_logs_created_at ON activity_logs(created_at);
CREATE INDEX idx_activity_logs_target_user_id ON activity_logs(target_user_id);
CREATE INDEX idx_activity_logs_user_created_at ON activity_logs(user_id, created_at);

-- NOTIFICATIONS TABLE: realtime notifications for users
CREATE TABLE notifications (
    id INT PRIMARY KEY AUTO_INCREMENT,                        
    user_id INT NOT NULL,                                     
    message TEXT NOT NULL,                                    
    is_read BOOLEAN DEFAULT FALSE,                            
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),     
    updated_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3), 
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_notifications_user_id_is_read ON notifications(user_id, is_read);

-- VERSION CONTROL TABLE: audit/history for versioning and concurrency
CREATE TABLE version_control (
    id INT PRIMARY KEY AUTO_INCREMENT,
    entity_type VARCHAR(100) NOT NULL,            -- e.g., 'tasks', 'projects', 'comments'
    entity_id INT NOT NULL,                        -- ID of the record changed
    version INT NOT NULL,                          -- version number
    changed_by INT NOT NULL,                       -- user_id who made the change
    change_summary TEXT,                           -- optional description or JSON diff
    created_at DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),
    CONSTRAINT fk_version_control_user FOREIGN KEY (changed_by) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX idx_version_control_entity ON version_control(entity_type, entity_id);

